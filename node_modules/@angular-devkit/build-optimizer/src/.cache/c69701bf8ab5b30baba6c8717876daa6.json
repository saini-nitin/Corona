{"remainingRequest":"/Users/nitin/Desktop/CDP_PORTAL_ANGULAR_THEME/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/nitin/Desktop/CDP_PORTAL_ANGULAR_THEME/node_modules/ng-block-ui/lib/services/block-ui-instance.service.js","dependencies":[{"path":"/Users/nitin/Desktop/CDP_PORTAL_ANGULAR_THEME/node_modules/ng-block-ui/lib/services/block-ui-instance.service.js","mtime":1523320238000},{"path":"/Users/nitin/Desktop/CDP_PORTAL_ANGULAR_THEME/node_modules/cache-loader/dist/cjs.js","mtime":1528298457372},{"path":"/Users/nitin/Desktop/CDP_PORTAL_ANGULAR_THEME/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["\"use strict\";\nvar __assign = (this && this.__assign) || Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s)\n            if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n    }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar ReplaySubject_1 = require(\"rxjs/ReplaySubject\");\nvar block_ui_actions_constant_1 = require(\"../constants/block-ui-actions.constant\");\nvar block_ui_default_name_constant_1 = require(\"../constants/block-ui-default-name.constant\");\nvar BlockUIInstanceService = /** @class */ /*@__PURE__*/ (function () {\n    function BlockUIInstanceService() {\n        this.blockUISettings = {};\n        this.blockUIInstances = [];\n        this.blockUISubject = new ReplaySubject_1.ReplaySubject();\n        this.blockUIObservable = this.blockUISubject.asObservable();\n        this.blockUIObservable.subscribe(this.blockUIMiddleware.bind(this));\n    }\n    BlockUIInstanceService.prototype.getSettings = function () {\n        return this.blockUISettings;\n    };\n    BlockUIInstanceService.prototype.updateSettings = function (settings) {\n        if (settings === void 0) {\n            settings = {};\n        }\n        this.blockUISettings = __assign({}, this.blockUISettings, settings);\n    };\n    BlockUIInstanceService.prototype.decorate = function (name) {\n        if (name === void 0) {\n            name = block_ui_default_name_constant_1.BlockUIDefaultName;\n        }\n        var blockUI = {\n            name: name,\n            isActive: false,\n            start: this.dispatch(this.blockUISubject, block_ui_actions_constant_1.BlockUIActions.START, name),\n            update: this.dispatch(this.blockUISubject, block_ui_actions_constant_1.BlockUIActions.UPDATE, name),\n            stop: this.dispatch(this.blockUISubject, block_ui_actions_constant_1.BlockUIActions.STOP, name),\n            reset: this.dispatch(this.blockUISubject, block_ui_actions_constant_1.BlockUIActions.RESET, name),\n            unsubscribe: this.dispatch(this.blockUISubject, block_ui_actions_constant_1.BlockUIActions.UNSUBSCRIBE, name)\n        };\n        this.blockUIInstances.push(blockUI);\n        return blockUI;\n    };\n    BlockUIInstanceService.prototype.observe = function () {\n        return this.blockUIObservable;\n    };\n    BlockUIInstanceService.prototype.blockUIMiddleware = function (_a) {\n        var action = _a.action, name = _a.name;\n        var isActive = null;\n        switch (action) {\n            case (block_ui_actions_constant_1.BlockUIActions.START):\n                isActive = true;\n                break;\n            case (block_ui_actions_constant_1.BlockUIActions.STOP):\n            case (block_ui_actions_constant_1.BlockUIActions.RESET):\n                isActive = false;\n                break;\n        }\n        if (isActive !== null) {\n            this.blockUIInstances.forEach(function (i) {\n                return i.isActive = i.name === name ? isActive : i.isActive;\n            });\n        }\n    };\n    BlockUIInstanceService.prototype.dispatch = function (subject, action, name) {\n        if (name === void 0) {\n            name = block_ui_default_name_constant_1.BlockUIDefaultName;\n        }\n        return function (message) {\n            subject.next({\n                name: name,\n                action: action,\n                message: message\n            });\n        };\n    };\n    BlockUIInstanceService.decorators = [\n        { type: core_1.Injectable },\n    ];\n    return BlockUIInstanceService;\n}());\nexports.BlockUIInstanceService = BlockUIInstanceService;\n",null]}