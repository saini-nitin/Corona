{"remainingRequest":"/Users/nitin/Desktop/CDP_PORTAL_ANGULAR_THEME/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/nitin/Desktop/CDP_PORTAL_ANGULAR_THEME/node_modules/amazing-time-picker/amazing-time-picker.es5.js","dependencies":[{"path":"/Users/nitin/Desktop/CDP_PORTAL_ANGULAR_THEME/node_modules/amazing-time-picker/amazing-time-picker.es5.js","mtime":1520518317000},{"path":"/Users/nitin/Desktop/CDP_PORTAL_ANGULAR_THEME/node_modules/cache-loader/dist/cjs.js","mtime":1528298457372},{"path":"/Users/nitin/Desktop/CDP_PORTAL_ANGULAR_THEME/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { ApplicationRef, Component, ComponentFactoryResolver, Directive, EventEmitter, HostListener, Injectable, Injector, NgModule, Output, ViewChild, ViewContainerRef } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Subject as Subject$1 } from 'rxjs/Subject';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nvar AtpCoreService = /*@__PURE__*/ (function () {\n    function AtpCoreService() {\n    }\n    /**\n     * @param {?} min\n     * @param {?} max\n     * @return {?}\n     */\n    AtpCoreService.prototype.allowedTimes = function (min, max) {\n        var /** @type {?} */ allTimes = [];\n        var /** @type {?} */ nowMinHour = +min.split(':')[0];\n        var /** @type {?} */ nowMaxHour = +max.split(':')[0];\n        var /** @type {?} */ nowMinMin = +min.split(':')[1];\n        var /** @type {?} */ nowMaxMin = +max.split(':')[1];\n        for (var /** @type {?} */ i = nowMinHour; i <= nowMaxHour; i++) {\n            var /** @type {?} */ j = 0, /** @type {?} */ jDest = 59;\n            if (i === nowMinHour) {\n                j = nowMinMin;\n            }\n            else if (i === nowMaxHour) {\n                jDest = nowMaxMin;\n            }\n            for (j; j <= jDest; j++) {\n                var /** @type {?} */ hour = i <= 12 ? i : i - 12;\n                var /** @type {?} */ minute = j;\n                var /** @type {?} */ ampm = i < 12 ? 'AM' : 'PM';\n                allTimes.push(hour + ':' + minute + ' ' + ampm);\n            }\n        }\n        return allTimes;\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    AtpCoreService.prototype.ClockMaker = function (type) {\n        var /** @type {?} */ items = [];\n        var /** @type {?} */ timeVal = (type === 'minute') ? 60 : 12;\n        var /** @type {?} */ timeStep = (type === 'minute') ? 5 : 1;\n        var /** @type {?} */ timeStart = (type === 'minute') ? 0 : 1;\n        var /** @type {?} */ r = 124;\n        var /** @type {?} */ j = r - 25;\n        for (var /** @type {?} */ min = timeStart; min <= timeVal; min += timeStep) {\n            if (min !== 60) {\n                var /** @type {?} */ str = String(min);\n                var /** @type {?} */ x = j * Math.sin(Math.PI * 2 * (min / timeVal));\n                var /** @type {?} */ y = j * Math.cos(Math.PI * 2 * (min / timeVal));\n                items.push({\n                    time: str,\n                    left: (x + r - 17) + 'px',\n                    top: (-y + r - 17) + 'px',\n                    type: type\n                });\n            }\n        }\n        return items;\n    };\n    /**\n     * @param {?} time\n     * @return {?}\n     */\n    AtpCoreService.prototype.TimeToString = function (time) {\n        var ampm = time.ampm, minute = time.minute, hour = time.hour;\n        var /** @type {?} */ hh = ampm === 'PM' ? +hour + 12 : +hour;\n        if (ampm === 'AM' && hh === 12) {\n            hh = 0;\n        }\n        if (hh === 24) {\n            hh = 12;\n        }\n        hh = hh < 10 ? '0' + hh : ('' + hh);\n        var /** @type {?} */ mm = minute < 10 ? '0' + minute : minute;\n        return hh + \":\" + mm;\n    };\n    /**\n     * Converts 00:00 format to ITime object\n     * @param {?} time\n     * @return {?}\n     */\n    AtpCoreService.prototype.StringToTime = function (time) {\n        var _a = time.split(':'), h = _a[0], m = _a[1];\n        var /** @type {?} */ hour = +h > 12 ? +h - 12 : +h;\n        hour = hour === 0 ? 12 : hour;\n        var /** @type {?} */ ampm = +h >= 12 ? 'PM' : 'AM';\n        return {\n            ampm: ampm, minute: +m, hour: hour\n        };\n    };\n    /**\n     * \\@experimental\n     * @param {?} ele\n     * @param {?} parrentPos\n     * @param {?} step\n     * @return {?}\n     */\n    AtpCoreService.prototype.CalcDegrees = function (ele, parrentPos, step) {\n        var /** @type {?} */ clock = {\n            width: ele.currentTarget.offsetWidth,\n            height: ele.currentTarget.offsetHeight\n        };\n        var /** @type {?} */ targetX = clock.width / 2;\n        var /** @type {?} */ targetY = clock.height / 2;\n        var /** @type {?} */ Vx = Math.round((ele.clientX - parrentPos.left) - targetX);\n        var /** @type {?} */ Vy = Math.round(targetY - (ele.clientY - parrentPos.top));\n        var /** @type {?} */ radians = -Math.atan2(Vy, Vx);\n        radians += 2.5 * Math.PI;\n        var /** @type {?} */ degrees = Math.round(radians * 180 / Math.PI);\n        var /** @type {?} */ degMod = degrees % step;\n        if (degMod >= step / 2) {\n            degrees = degrees + (step - degMod);\n        }\n        else if (degMod < step / 2) {\n            degrees = degrees - degMod;\n        }\n        return degrees;\n    };\n    return AtpCoreService;\n}());\nvar TimePickerComponent = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} core\n     */\n    function TimePickerComponent(core$$1) {\n        var _this = this;\n        this.core = core$$1;\n        this.subject = null;\n        this.activeModal = false;\n        this.clockType = 'hour';\n        this.time = {\n            ampm: 'AM',\n            minute: 0,\n            hour: 12\n        };\n        this.nowTime = this.time.hour;\n        this.isPopup = true;\n        this.clockMaker = function () {\n            var /** @type {?} */ type = _this.clockType;\n            _this.clockObject = _this.core.ClockMaker(type);\n            _this.setArrow(null);\n        };\n        this.setActiveTime = function () {\n            _this.nowTime = (_this.clockType === 'minute' ? _this.time.minute : _this.time.hour);\n        };\n        this.setArrow = function (obj) {\n            if (obj) {\n                _this.clockType = obj.type;\n                if (_this.clockType === 'minute') {\n                    _this.time.minute = obj.time;\n                }\n                else {\n                    _this.time.hour = obj.time;\n                }\n            }\n            var /** @type {?} */ step = (_this.clockType === 'minute') ? 6 : 30;\n            var /** @type {?} */ time = (_this.clockType === 'minute') ? _this.time.minute : _this.time.hour;\n            var /** @type {?} */ degrees = time * step;\n            _this.rotationClass(degrees);\n            _this.setActiveTime();\n        };\n        this.rotationClass = function (degrees) {\n            _this.degree = degrees;\n        };\n        this.getDegree = function (ele) {\n            var /** @type {?} */ step = _this.clockType === 'minute' ? 6 : 30;\n            var /** @type {?} */ parrentPos = ele.currentTarget.getBoundingClientRect();\n            if (_this.isClicked && (ele.currentTarget === ele.target || ele.target.nodeName === 'BUTTON')) {\n                var /** @type {?} */ clock = {\n                    width: ele.currentTarget.offsetWidth,\n                    height: ele.currentTarget.offsetHeight\n                };\n                var /** @type {?} */ degrees = _this.core.CalcDegrees(ele, parrentPos, step);\n                var /** @type {?} */ hour = _this.time.hour, /** @type {?} */ minute = _this.time.minute;\n                if (_this.clockType === 'hour') {\n                    hour = (degrees / step);\n                    hour = (hour > 12) ? hour - 12 : hour;\n                }\n                else if (_this.clockType === 'minute') {\n                    minute = (degrees / step);\n                    minute = (minute > 59) ? minute - 60 : minute;\n                }\n                var /** @type {?} */ min = _this.config.rangeTime.start, /** @type {?} */ max = _this.config.rangeTime.end;\n                var /** @type {?} */ nowMinHour = +min.split(':')[0] < 12 ? +min.split(':')[0] : +min.split(':')[0] - 12;\n                var /** @type {?} */ nowMaxHour = +max.split(':')[0] < 12 ? +max.split(':')[0] : +max.split(':')[0] - 12;\n                var /** @type {?} */ nowMinMin = +min.split(':')[1];\n                var /** @type {?} */ nowMaxMin = +max.split(':')[1];\n                var /** @type {?} */ nowTime = _this.GetNowTime(hour, _this.time.ampm, minute);\n                if (_this.allowed.indexOf(nowTime) > -1) {\n                    _this.time.hour = hour;\n                    _this.time.minute = minute;\n                    _this.rotationClass(degrees);\n                    _this.setActiveTime();\n                }\n                else if (_this.clockType === 'hour' && (hour === nowMinHour && minute <= nowMinMin)) {\n                    _this.time.hour = nowMinHour;\n                    _this.time.minute = nowMinMin;\n                }\n                else if (_this.clockType === 'hour' && (hour === nowMaxHour && minute >= nowMaxMin)) {\n                    _this.time.hour = nowMaxHour;\n                    _this.time.minute = nowMaxMin;\n                }\n            }\n        };\n    }\n    /**\n     * @param {?} time\n     * @return {?}\n     */\n    TimePickerComponent.prototype.ParseStringToTime = function (time) {\n        time = (time === '' || time === undefined || time === null) ? this.time.hour + ':' + this.time.minute : time;\n        this.time = this.core.StringToTime(time);\n    };\n    /**\n     * @return {?}\n     */\n    TimePickerComponent.prototype.GetTime = function () {\n        var /** @type {?} */ time = this.core.TimeToString(this.time);\n        this.subject.next(time);\n    };\n    /**\n     * @return {?}\n     */\n    TimePickerComponent.prototype.setTime = function () {\n        this.isClicked = false;\n        if (this.config.changeToMinutes && this.clockType === 'hour') {\n            this.clockType = 'minute';\n            this.clockMaker();\n        }\n    };\n    /**\n     * @param {?} hour\n     * @param {?} ampm\n     * @param {?} minute\n     * @return {?}\n     */\n    TimePickerComponent.prototype.GetNowTime = function (hour, ampm, minute) {\n        var /** @type {?} */ Hour = (hour === 12 && ampm === 'AM') ? '0' : hour;\n        var /** @type {?} */ nowTime = Hour + ':' + minute + ' ' + ampm;\n        return nowTime;\n    };\n    /**\n     * @return {?}\n     */\n    TimePickerComponent.prototype.checkBet = function () {\n        var /** @type {?} */ nowTime = this.GetNowTime(this.time.hour, this.time.ampm, this.time.minute);\n        if (this.allowed.indexOf(nowTime) === -1) {\n            this.ParseStringToTime(this.config.rangeTime.start);\n            this.setArrow(null);\n            this.setActiveTime();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    TimePickerComponent.prototype.modalAnimation = function () {\n        var _this = this;\n        setTimeout(function () {\n            _this.activeModal = true;\n        }, 1);\n    };\n    /**\n     * @return {?}\n     */\n    TimePickerComponent.prototype.ngOnInit = function () {\n        this.allowed = this.core.allowedTimes(this.config.rangeTime.start, this.config.rangeTime.end);\n        if (this.config && this.config.onlyMinute) {\n            this.clockType = 'minute';\n        }\n        if (this.config && this.config.onlyPM) {\n            this.time.ampm = 'PM';\n        }\n        this.clockMaker();\n        this.modalAnimation();\n    };\n    /**\n     * @return {?}\n     */\n    TimePickerComponent.prototype.MinuteClick = function () {\n        /**\n         * We are not permitting user to select the minute.\n         * but anyway, it will return the standard time, if provided the default time.\n         */\n        if (this.config && this.config.onlyHour) {\n            return false;\n        }\n        this.clockType = 'minute';\n        this.clockMaker();\n    };\n    /**\n     * @return {?}\n     */\n    TimePickerComponent.prototype.HourClick = function () {\n        /**\n         * We are not permitting user to select the minute.\n         * but anyway, it will return the standard time, if provided the default time.\n         */\n        if (this.config && this.config.onlyMinute) {\n            return false;\n        }\n        this.clockType = 'hour';\n        this.clockMaker();\n    };\n    /**\n     * @return {?}\n     */\n    TimePickerComponent.prototype.SetAM = function () {\n        if (this.config && this.config.onlyPM) {\n            return false;\n        }\n        this.time.ampm = 'AM';\n        this.checkBet();\n    };\n    /**\n     * @return {?}\n     */\n    TimePickerComponent.prototype.SetPM = function () {\n        if (this.config && this.config.onlyAM) {\n            return false;\n        }\n        this.time.ampm = 'PM';\n        this.checkBet();\n    };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    TimePickerComponent.prototype.Close = function (e) {\n        var _this = this;\n        if (e.target === e.currentTarget) {\n            if (this.isPopup === true) {\n                this.activeModal = false;\n                setTimeout(function () {\n                    _this.appRef.detachView(_this._ref.hostView);\n                    _this._ref.destroy();\n                }, 400);\n            }\n        }\n    };\n    /**\n     * @return {?}\n     */\n    TimePickerComponent.prototype.GetSeparator = function () {\n        if (this.preference && this.preference.separator) {\n            return this.preference.separator;\n        }\n        return ':';\n    };\n    /**\n     * @param {?} period\n     * @return {?}\n     */\n    TimePickerComponent.prototype.GetPeriod = function (period) {\n        if (this.preference && this.preference.period) {\n            return this.preference.period(period);\n        }\n        return period;\n    };\n    /**\n     * @return {?}\n     */\n    TimePickerComponent.prototype.GetMinute = function () {\n        if (this.preference && this.preference.minute) {\n            return this.preference.minute(this.time.minute);\n        }\n        var /** @type {?} */ min = this.time.minute.toString();\n        if (+min < 10) {\n            min = '0' + min;\n        }\n        return min;\n    };\n    /**\n     * @return {?}\n     */\n    TimePickerComponent.prototype.GetHour = function () {\n        if (this.preference && this.preference.hour) {\n            return this.preference.hour(this.time.hour);\n        }\n        return this.time.hour;\n    };\n    /**\n     * @param {?} clock\n     * @return {?}\n     */\n    TimePickerComponent.prototype.GetClockTime = function (clock) {\n        if (!this.preference) {\n            return clock.time;\n        }\n        if (this.clockType === 'hour' && this.preference.clockHour) {\n            return this.preference.clockHour(clock.time);\n        }\n        if (this.clockType === 'minute' && this.preference.clockMinute) {\n            return this.preference.clockMinute(clock.time);\n        }\n        return clock.time;\n    };\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    TimePickerComponent.prototype.GetLabel = function (key) {\n        var /** @type {?} */ defaults = {\n            'ok': 'Ok',\n            'cancel': 'Cancel'\n        };\n        if ((this.preference && this.preference.labels && this.preference.labels.ok)) {\n            defaults.ok = this.preference.labels.ok;\n        }\n        if ((this.preference && this.preference.labels && this.preference.labels.cancel)) {\n            defaults.cancel = this.preference.labels.cancel;\n        }\n        return defaults[key];\n    };\n    return TimePickerComponent;\n}());\nvar AtpTimePickerComponent = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} resolver\n     * @param {?} appRef\n     */\n    function AtpTimePickerComponent(resolver, appRef) {\n        this.resolver = resolver;\n        this.appRef = appRef;\n        this.timeSelected = new EventEmitter();\n        this.config = {};\n    }\n    /**\n     * @return {?}\n     */\n    AtpTimePickerComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        var /** @type {?} */ config = this.config;\n        config = {\n            time: config.time || '00:00',\n            theme: ['light', 'dark', 'material'].indexOf(config.theme) > 0 ? config.theme : 'light' || config.theme || 'light',\n            rangeTime: config.rangeTime || { start: '0:0', end: '24:0' },\n            arrowStyle: config.arrowStyle || {}\n        };\n        config.arrowStyle = {\n            background: (config.arrowStyle.background) ?\n                config.arrowStyle.background : config.theme !== undefined ?\n                config.theme === 'dark' ? 'rgb(128, 203, 196)' : 'blue' : 'blue',\n            color: config.arrowStyle.color || '#fff'\n        };\n        var /** @type {?} */ cfr = this.resolver.resolveComponentFactory(TimePickerComponent);\n        var /** @type {?} */ tsc = this.container.createComponent(cfr);\n        tsc.instance.subject = new Subject$1();\n        tsc.instance._ref = tsc;\n        tsc.instance.appRef = this.appRef;\n        tsc.instance.timerElement = '';\n        tsc.instance.config = config;\n        tsc.instance.activeModal = true;\n        tsc.instance.isPopup = false;\n        tsc.instance.ParseStringToTime(config.time);\n        tsc.instance.subject.asObservable().subscribe(function (time) {\n            _this.timeSelected.emit(time);\n        });\n    };\n    return AtpTimePickerComponent;\n}());\nvar arabic = new Intl.NumberFormat('ar-AE');\nvar persian = new Intl.NumberFormat('fa-IR');\nvar PersianPreference = {\n    hour: function (x) { return persian.format(x); },\n    minute: function (x) {\n        var /** @type {?} */ exp = persian.format(x);\n        if (exp.length === 1) {\n            exp = persian.format(0) + exp;\n        }\n        return exp;\n    },\n    separator: ':',\n    period: function (x) { return x === 'AM' ? 'صبح' : 'عصر'; },\n    clockHour: function (x) { return persian.format(x); },\n    clockMinute: function (x) { return persian.format(x); },\n    labels: {\n        ok: 'تایید',\n        cancel: 'لغو'\n    }\n};\nvar ArabicPreference = {\n    hour: function (x) { return arabic.format(x); },\n    minute: function (x) {\n        var /** @type {?} */ exp = arabic.format(x);\n        if (exp.length === 1) {\n            exp = arabic.format(0) + exp;\n        }\n        return exp;\n    },\n    separator: ':',\n    period: function (x) { return x === 'AM' ? 'صباحا' : 'مساء'; },\n    clockHour: function (x) { return arabic.format(x); },\n    clockMinute: function (x) { return arabic.format(x); },\n    labels: {\n        ok: 'حسنا',\n        cancel: 'إلغاء'\n    }\n};\nvar ChinesePreference = {\n    hour: function (x) { return x; },\n    minute: function (x) {\n        var /** @type {?} */ exp = x;\n        if (exp.length === 1) {\n            exp = '۰' + exp;\n        }\n        return exp;\n    },\n    separator: ':',\n    period: function (x) { return x === 'AM' ? '上午' : '下午'; },\n    clockHour: function (x) { return x; },\n    clockMinute: function (x) { return x; },\n    labels: {\n        ok: '好',\n        cancel: '取消'\n    }\n};\nvar Preference = function (locale) {\n    switch (locale) {\n        case 'fa':\n            return PersianPreference;\n        case 'ar':\n            return ArabicPreference;\n        case 'ch':\n            return ChinesePreference;\n        default:\n            return null;\n    }\n};\nvar AmazingTimePickerService = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} resolver\n     * @param {?} appRef\n     * @param {?} injector\n     */\n    function AmazingTimePickerService(resolver, appRef, injector) {\n        this.resolver = resolver;\n        this.appRef = appRef;\n        this.injector = injector;\n    }\n    /**\n     * @param {?=} config\n     * @return {?}\n     */\n    AmazingTimePickerService.prototype.open = function (config) {\n        var /** @type {?} */ thems = ['light', 'dark', 'material-red', 'material-green', 'material-blue', 'material-purple', 'material-orange'];\n        config = config || {};\n        config = ({\n            time: config.time || '00:00',\n            theme: thems.indexOf(config.theme) > 0 ? config.theme : 'light' || config.theme || 'light',\n            rangeTime: config.rangeTime || { start: '0:0', end: '24:0' },\n            arrowStyle: config.arrowStyle || {},\n            locale: config.locale || 'en',\n            changeToMinutes: config.changeToMinutes || false,\n            preference: config.preference || null,\n            onlyHour: config.onlyHour || false,\n            onlyMinute: config.onlyMinute || false,\n            onlyAM: config.onlyAM || false,\n            onlyPM: config.onlyPM || false,\n        });\n        config.rangeTime = {\n            start: config.rangeTime.start || '0:0',\n            end: config.rangeTime.end || '24:0',\n        };\n        config.arrowStyle = {\n            background: (config.arrowStyle.background) ?\n                config.arrowStyle.background : config.theme !== undefined ?\n                config.theme === 'dark' ? 'rgb(128, 203, 196)' : '' : '',\n            color: config.arrowStyle.color || ''\n        };\n        var /** @type {?} */ componentRef = this.resolver.resolveComponentFactory(TimePickerComponent);\n        var /** @type {?} */ tsc = componentRef.create(this.injector);\n        this.appRef.attachView(tsc.hostView);\n        var /** @type {?} */ domElem = (((tsc.hostView)).rootNodes[0]);\n        document.body.appendChild(domElem);\n        tsc.instance.subject = new Subject$1();\n        tsc.instance._ref = tsc;\n        tsc.instance.appRef = this.appRef;\n        tsc.instance.timerElement = '';\n        tsc.instance.config = config;\n        if (config.preference) {\n            tsc.instance.preference = config.preference;\n        }\n        else {\n            tsc.instance.preference = Preference(config.locale);\n        }\n        tsc.instance.ParseStringToTime(config.time);\n        return {\n            afterClose: function () {\n                return tsc.instance.subject.asObservable();\n            }\n        };\n    };\n    return AmazingTimePickerService;\n}());\nvar AtpDirective = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} viewContainerRef\n     * @param {?} atp\n     */\n    function AtpDirective(viewContainerRef, atp) {\n        this.viewContainerRef = viewContainerRef;\n        this.atp = atp;\n        this.myClick = new EventEmitter();\n        this.onChange = function (x) { };\n        this.elementRef = this.viewContainerRef.element;\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    AtpDirective.prototype.onClick = function (e) {\n        var _this = this;\n        var /** @type {?} */ ele = this.viewContainerRef.element.nativeElement;\n        var /** @type {?} */ time = ele.value;\n        var /** @type {?} */ theme = ele.getAttribute('theme');\n        var /** @type {?} */ start = ele.getAttribute('start');\n        var /** @type {?} */ end = ele.getAttribute('end');\n        var /** @type {?} */ locale = ele.getAttribute('locale') || 'en';\n        var /** @type {?} */ changeToMinutes = ele.getAttribute('changeToMinutes') === 'true';\n        var /** @type {?} */ preference = ele.getAttribute('preference') || null;\n        var /** @type {?} */ onlyHour = ele.getAttribute('onlyHour') || false;\n        var /** @type {?} */ onlyMinute = ele.getAttribute('onlyMinute') || false;\n        var /** @type {?} */ onlyAM = ele.getAttribute('onlyAM') || false;\n        var /** @type {?} */ onlyPM = ele.getAttribute('onlyPM') || false;\n        var /** @type {?} */ arrowStyle = ele.getAttribute('arrowStyle');\n        arrowStyle = (arrowStyle) ? JSON.parse(arrowStyle.replace(new RegExp('\\'', 'g'), '\"')) : '';\n        var /** @type {?} */ timePickerFunction = this.atp.open({\n            time: time,\n            theme: theme,\n            rangeTime: { start: start, end: end },\n            'arrowStyle': arrowStyle,\n            locale: locale,\n            changeToMinutes: changeToMinutes,\n            onlyHour: onlyHour,\n            onlyMinute: onlyMinute,\n            onlyAM: onlyAM,\n            onlyPM: onlyPM,\n            preference: preference\n        });\n        timePickerFunction.afterClose().subscribe(function (retTime) {\n            _this.writeValue(retTime); // update the native element\n            _this.onChange(retTime); // update the form value (if there's a form)\n        });\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    AtpDirective.prototype.writeValue = function (value) {\n        if (this.elementRef) {\n            this.elementRef.nativeElement.value = value;\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    AtpDirective.prototype.registerOnChange = function (fn) {\n        this.onChange = fn;\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    AtpDirective.prototype.registerOnTouched = function (fn) { };\n    return AtpDirective;\n}());\nvar AmazingTimePickerModule = /*@__PURE__*/ (function () {\n    function AmazingTimePickerModule() {\n    }\n    return AmazingTimePickerModule;\n}());\n/**\n * Generated bundle index. Do not edit.\n */\nexport { AmazingTimePickerModule, AmazingTimePickerService, AtpCoreService as ɵb, AtpTimePickerComponent as ɵc, AtpDirective as ɵd, TimePickerComponent as ɵa };\n//# sourceMappingURL=amazing-time-picker.es5.js.map\n",null]}