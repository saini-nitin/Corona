{"remainingRequest":"/Users/nitin/Desktop/CDP_PORTAL_ANGULAR_THEME/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/nitin/Desktop/CDP_PORTAL_ANGULAR_THEME/node_modules/ng-block-ui/lib/components/block-ui-content/block-ui-content.component.js","dependencies":[{"path":"/Users/nitin/Desktop/CDP_PORTAL_ANGULAR_THEME/node_modules/ng-block-ui/lib/components/block-ui-content/block-ui-content.component.js","mtime":1523320238000},{"path":"/Users/nitin/Desktop/CDP_PORTAL_ANGULAR_THEME/node_modules/cache-loader/dist/cjs.js","mtime":1528298457372},{"path":"/Users/nitin/Desktop/CDP_PORTAL_ANGULAR_THEME/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nrequire(\"rxjs/add/operator/map\");\nvar block_ui_instance_service_1 = require(\"../../services/block-ui-instance.service\");\nvar block_ui_actions_constant_1 = require(\"../../constants/block-ui-actions.constant\");\nvar block_ui_default_name_constant_1 = require(\"../../constants/block-ui-default-name.constant\");\nvar block_ui_content_component_style_1 = require(\"./block-ui-content.component.style\");\nvar block_ui_content_component_template_1 = require(\"./block-ui-content.component.template\");\nvar BlockUIContentComponent = /** @class */ /*@__PURE__*/ (function () {\n    function BlockUIContentComponent(blockUI, resolver, changeDetectionRef) {\n        this.blockUI = blockUI;\n        this.resolver = resolver;\n        this.changeDetectionRef = changeDetectionRef;\n        this.name = block_ui_default_name_constant_1.BlockUIDefaultName;\n        this.delayStart = 0;\n        this.delayStop = 0;\n        this.timeouts = { delayStart: null, delayStop: null };\n        this.active = false;\n    }\n    BlockUIContentComponent.prototype.ngOnInit = function () {\n        this.settings = this.blockUI.getSettings();\n        this.blockUISubscription = this.subscribeToBlockUI(this.blockUI.observe());\n    };\n    BlockUIContentComponent.prototype.ngAfterViewInit = function () {\n        try {\n            if (this.templateCmp) {\n                if (this.templateCmp instanceof core_1.TemplateRef) {\n                    this.templateOutlet.createEmbeddedView(this.templateCmp);\n                }\n                else {\n                    var templateComp = this.resolver.resolveComponentFactory(this.templateCmp);\n                    this.templateCompRef = this.templateOutlet.createComponent(templateComp);\n                    this.updateBlockTemplate(this.message);\n                }\n            }\n        }\n        catch (error) {\n            console.error('ng-block-ui:', error);\n        }\n    };\n    BlockUIContentComponent.prototype.ngAfterViewChecked = function () {\n        this.changeDetectionRef.detectChanges();\n    };\n    BlockUIContentComponent.prototype.subscribeToBlockUI = function (blockUI$) {\n        var _this = this;\n        return blockUI$\n            .subscribe(function (event) { return _this.onDispatchedEvent(event); });\n    };\n    BlockUIContentComponent.prototype.onDispatchedEvent = function (event) {\n        switch (event.action) {\n            case (block_ui_actions_constant_1.BlockUIActions.START):\n                this.delay('delayStart', this.delayStart, event)(this.onStart.bind(this));\n                break;\n            case (block_ui_actions_constant_1.BlockUIActions.STOP):\n                this.delay('delayStop', this.delayStop, event)(this.onStop.bind(this));\n                break;\n            case (block_ui_actions_constant_1.BlockUIActions.UPDATE):\n                this.onUpdate(event);\n                break;\n            case (block_ui_actions_constant_1.BlockUIActions.RESET):\n                this.onStop(event);\n                break;\n            case (block_ui_actions_constant_1.BlockUIActions.UNSUBSCRIBE):\n                this.onStop(event);\n                this.onUnsubscribe(event.name);\n                break;\n        }\n    };\n    BlockUIContentComponent.prototype.onStart = function (_a) {\n        var name = _a.name, message = _a.message;\n        if (name === this.name) {\n            this.active = true;\n            this.message = message || this.defaultMessage || this.settings.message;\n            this.updateBlockTemplate(this.message);\n            this.changeDetectionRef.detectChanges();\n        }\n    };\n    BlockUIContentComponent.prototype.onStop = function (_a) {\n        var name = _a.name, action = _a.action;\n        var delayStart = this.timeouts.delayStart;\n        if (name === this.name || action === block_ui_actions_constant_1.BlockUIActions.RESET) {\n            delayStart && clearTimeout(delayStart);\n            this.active = false;\n            this.changeDetectionRef.detectChanges();\n        }\n    };\n    BlockUIContentComponent.prototype.onUpdate = function (_a) {\n        var name = _a.name, message = _a.message;\n        if (name === this.name) {\n            this.active = true;\n            this.message = message || this.defaultMessage || this.settings.message;\n            this.updateBlockTemplate(this.message);\n            this.changeDetectionRef.detectChanges();\n        }\n    };\n    BlockUIContentComponent.prototype.updateBlockTemplate = function (msg) {\n        if (this.templateCompRef && this.templateCompRef instanceof core_1.ComponentRef) {\n            this.templateCompRef.instance.message = msg;\n        }\n    };\n    BlockUIContentComponent.prototype.onUnsubscribe = function (name) {\n        if (this.blockUISubscription && name === this.name) {\n            this.blockUISubscription.unsubscribe();\n        }\n    };\n    BlockUIContentComponent.prototype.delay = function (type, delay, event) {\n        var _this = this;\n        return function (action) {\n            delay = delay || _this.settings[type] || 0;\n            if (delay) {\n                _this.timeouts[type] = setTimeout(function (event) {\n                    action(event);\n                }, delay, event);\n            }\n            else {\n                action(event);\n            }\n        };\n    };\n    BlockUIContentComponent.prototype.ngOnDestroy = function () {\n        this.onUnsubscribe(this.name);\n    };\n    BlockUIContentComponent.decorators = [\n        { type: core_1.Component, args: [{\n                    selector: 'block-ui-content',\n                    template: block_ui_content_component_template_1.template,\n                    styles: [block_ui_content_component_style_1.styles],\n                    // TODO: Find how to bundle styles for npm\n                    encapsulation: core_1.ViewEncapsulation.None\n                },] },\n    ];\n    BlockUIContentComponent.propDecorators = {\n        \"name\": [{ type: core_1.Input },],\n        \"delayStart\": [{ type: core_1.Input },],\n        \"delayStop\": [{ type: core_1.Input },],\n        \"defaultMessage\": [{ type: core_1.Input, args: ['message',] },],\n        \"templateCmp\": [{ type: core_1.Input, args: ['template',] },],\n        \"templateOutlet\": [{ type: core_1.ViewChild, args: ['templateOutlet', { read: core_1.ViewContainerRef },] },],\n    };\n    return BlockUIContentComponent;\n}());\nexports.BlockUIContentComponent = BlockUIContentComponent;\n",null]}